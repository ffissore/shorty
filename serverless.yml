# they say that "with serverless you don't need to care about the infrastructure"
# yeah, sure. try writing this file without being AWS certified
# I'm not and I had to blindly copy paste it. Thanks @ittus btw. Original file is
# https://github.com/ittus/aws-lambda-vpc-nat-examples/blob/master/serverless.yml

service: shorty
provider:
    name: aws
    runtime: rust
    region: ${self:custom.region}
    environment:
        SHORTENER_REDIS_HOST:
            "Fn::GetAtt": [ServerlessElasticacheCluster, RedisEndpoint.Address]
        SHORTENER_REDIS_PORT:
            "Fn::GetAtt": [ServerlessElasticacheCluster, RedisEndpoint.Port]
        SHORTENER_API_KEY_MANDATORY: false
        RUST_LOG: info

package:
    individually: true

plugins:
    - serverless-rust

custom:
    redis:
        CACHE_INSTANCE_SIZE: cache.t2.micro
    region: us-east-1

functions:
    shorty:
        handler: shorty-aws-lambda
        vpc:
            securityGroupIds:
                - "Fn::GetAtt": ServerlessSecurityGroup.GroupId
            subnetIds:
                - Ref: ServerlessPrivateSubnetA
        events:
            - http:
                  path: '/{key}'
                  method: GET
            - http:
                  path: '/'
                  method: POST

resources:
    Resources:
        ServerlessVPC:
            Type: AWS::EC2::VPC
            Properties:
                CidrBlock: "10.0.0.0/16"
        ElasticIpLambda:
            Type: AWS::EC2::EIP
            Properties:
                Domain: vpc
        InternetGatewayLambda:
            Type: AWS::EC2::InternetGateway
        VPCGatewayAttachmentLambda:
            Type: AWS::EC2::VPCGatewayAttachment
            Properties:
                VpcId:
                    Ref: ServerlessVPC
                InternetGatewayId:
                    Ref: InternetGatewayLambda
        NatGatewayLambda:
            Type: AWS::EC2::NatGateway
            Properties:
                AllocationId:
                    Fn::GetAtt:
                        - ElasticIpLambda
                        - AllocationId
                SubnetId:
                    Ref: ServerlessPublicSubnetA
        ServerlessPrivateSubnetA:
            DependsOn: ServerlessVPC
            Type: AWS::EC2::Subnet
            Properties:
                VpcId:
                    Ref: ServerlessVPC
                AvailabilityZone: ${self:provider.region}a
                CidrBlock: "10.0.1.0/24"
        ServerlessPublicSubnetA:
            DependsOn: ServerlessVPC
            Type: AWS::EC2::Subnet
            Properties:
                VpcId:
                    Ref: ServerlessVPC
                AvailabilityZone: ${self:provider.region}a
                CidrBlock: "10.0.2.0/24"
        DefaultPrivateRouteTable:
            Type: AWS::EC2::RouteTable
            Properties:
                VpcId:
                    Ref: ServerlessVPC
        DefaultPrivateRoute:
            Type: AWS::EC2::Route
            Properties:
                RouteTableId:
                    Ref: DefaultPrivateRouteTable
                DestinationCidrBlock: 0.0.0.0/0
                NatGatewayId:
                    Ref: NatGatewayLambda
        DefaultPublicRouteTable:
            Type: AWS::EC2::RouteTable
            Properties:
                VpcId:
                    Ref: ServerlessVPC
        DefaultPublicRoute:
            Type: AWS::EC2::Route
            Properties:
                RouteTableId:
                    Ref: DefaultPublicRouteTable
                DestinationCidrBlock: 0.0.0.0/0
                GatewayId:
                    Ref: InternetGatewayLambda
        SubnetRouteTableAssociationLambdaPrivateA:
            Type: AWS::EC2::SubnetRouteTableAssociation
            Properties:
                SubnetId:
                    Ref: ServerlessPrivateSubnetA
                RouteTableId:
                    Ref: DefaultPrivateRouteTable
        SubnetRouteTableAssociationLambdaPublicA:
            Type: AWS::EC2::SubnetRouteTableAssociation
            Properties:
                SubnetId:
                    Ref: ServerlessPublicSubnetA
                RouteTableId:
                    Ref: DefaultPublicRouteTable
        ServerlessSecurityGroup:
            DependsOn: ServerlessVPC
            Type: AWS::EC2::SecurityGroup
            Properties:
                GroupDescription: SecurityGroup for Serverless Functions
                VpcId:
                    Ref: ServerlessVPC
        ServerlessStorageSecurityGroup:
            DependsOn: ServerlessVPC
            Type: AWS::EC2::SecurityGroup
            Properties:
                GroupDescription: Ingress for Redis Cluster
                VpcId:
                    Ref: ServerlessVPC
                SecurityGroupIngress:
                    - IpProtocol: tcp
                      FromPort: '6379'
                      ToPort: '6379'
                      SourceSecurityGroupId:
                          Ref: ServerlessSecurityGroup
        ServerlessCacheSubnetGroup:
            Type: AWS::ElastiCache::SubnetGroup
            Properties:
                Description: "Cache Subnet Group"
                SubnetIds:
                    - Ref: ServerlessPrivateSubnetA
        ServerlessElasticacheCluster:
            DependsOn: ServerlessStorageSecurityGroup
            Type: AWS::ElastiCache::CacheCluster
            Properties:
                AutoMinorVersionUpgrade: true
                Engine: redis
                CacheNodeType: ${self:custom.redis.CACHE_INSTANCE_SIZE}
                NumCacheNodes: 1
                VpcSecurityGroupIds:
                    - "Fn::GetAtt": ServerlessStorageSecurityGroup.GroupId
                CacheSubnetGroupName:
                    Ref: ServerlessCacheSubnetGroup
